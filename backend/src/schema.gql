# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Addon {
  createdAt: DateTime!
  id: ID!
  isAvailable: Boolean!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

input AddonRefInput {
  id: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Banner {
  createdAt: DateTime!
  description: String!
  id: ID!
  position: Float!
  targetId: String
  targetType: BannerTargetType!
  thumbnail: String
  title: String!
  type: BannerType!
  updatedAt: DateTime!
  url: String!
}

enum BannerTargetType {
  FOOD
  NONE
  RESTAURANT
}

enum BannerType {
  IMAGE
  VIDEO
}

input CategoryRefInput {
  id: String!
}

type Coupon {
  code: String!
  createdAt: DateTime!
  discountPercentage: Float!
  expiryDate: DateTime!
  id: ID!
  isActive: Boolean!
  maxDiscount: Float
  minOrderAmount: Float!
  updatedAt: DateTime!
}

input CreateAddonInput {
  foodItemId: String!
  isAvailable: Boolean! = true
  name: String!
  price: Float!
}

input CreateBannerInput {
  description: String!
  position: Float! = 0
  targetId: String
  targetType: BannerTargetType!
  thumbnail: String
  title: String!
  type: BannerType!
  url: String!
}

input CreateCouponInput {
  code: String!
  discountPercentage: Float!
  expiryDate: DateTime!
  isActive: Boolean! = true
  maxDiscount: Float
  minOrderAmount: Float!
}

input CreateCuisineInput {
  name: String!
  photo: String!
}

input CreateFoodCategoryInput {
  description: String
  image: String
  isActive: Boolean! = true
  name: String!
}

input CreateFoodInput {
  addons: [AddonRefInput!]
  category: CategoryRefInput!
  description: String
  isAvailable: Boolean!
  name: String!
  photo: String
  price: Float!
  restaurant: RestaurantRefInput!
  variations: [CreateVariationInput!]!
}

input CreateRestaurantInput {
  address: String!
  coverPhoto: String
  cuisines: [CuisineRefInput!]!
  deliveryZone: DeliveryZoneInput
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType!
  email: String!
  location: LocationInput!
  maxDeliveryTime: Int!
  minDeliveryTime: Int!
  name: String!
  password: String!
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntryInput!]
  zone: ZoneRefInput!
}

input CreateRiderInput {
  email: String
  licenseNumber: String
  name: String!
  password: String!
  phone: String!
  pushToken: String
  username: String!
  vehicleNumber: String
  vehicleType: VehicleType
  zoneId: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: String!
}

input CreateVariationInput {
  discountPrice: Float
  isAvailable: Boolean! = true
  name: String!
  price: Float!
}

input CreateZoneInput {
  description: String
  location: GeoJsonPolygonInput!
  title: String!
}

type Cuisine {
  id: ID!
  name: String!
  photo: String!
}

input CuisineRefInput {
  id: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeliveryZoneInput {
  coordinates: [[[Float!]!]!]
}

"""Type of delivery zone: circle or polygon"""
enum DeliveryZoneType {
  CIRCLE
  POLYGON
}

type Food {
  addons: [Addon!]
  category: FoodCategory!
  createdAt: DateTime!
  description: String
  id: ID!
  isAvailable: Boolean!
  name: String!
  photo: String
  price: Float!
  restaurant: Restaurant!
  updatedAt: DateTime!
  variations: [Variation!]!
}

type FoodCategory {
  createdAt: DateTime!
  description: String
  id: ID!
  image: String
  name: String!
  updatedAt: DateTime!
}

input GeoJsonPolygonInput {
  coordinates: [[[Float!]!]!]!
  type: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LocationInput {
  """Longitude and Latitude"""
  coordinates: [Float!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createAddon(createAddonInput: CreateAddonInput!): Addon!
  createBanner(createBannerInput: CreateBannerInput!): Banner!
  createCoupon(createCouponInput: CreateCouponInput!): Coupon!
  createCuisine(createCuisineInput: CreateCuisineInput!): Cuisine!
  createFood(createFoodInput: CreateFoodInput!): Food!
  createFoodCategory(createFoodCategoryInput: CreateFoodCategoryInput!): FoodCategory!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): Restaurant!
  createRider(createRiderInput: CreateRiderInput!): Rider!
  createUser(createUserInput: CreateUserInput!): User!
  createZone(createZoneInput: CreateZoneInput!): Zone!
  login(loginInput: LoginInput!): AuthResponse!
  removeAddon(id: String!): Boolean!
  removeBanner(id: String!): Boolean!
  removeCoupon(id: String!): Boolean!
  removeCuisine(id: String!): Boolean!
  removeFood(id: String!): Boolean!
  removeFoodCategory(id: String!): Boolean!
  removeRestaurant(id: String!): Restaurant!
  removeRider(id: String!): Boolean!
  removeUser(id: String!): User!
  removeZone(id: String!): Zone!
  updateAddon(updateAddonInput: UpdateAddonInput!): Addon!
  updateBanner(updateBannerInput: UpdateBannerInput!): Banner!
  updateCoupon(updateCouponInput: UpdateCouponInput!): Coupon!
  updateCuisine(updateCuisineInput: UpdateCuisineInput!): Cuisine!
  updateFood(updateFoodInput: UpdateFoodInput!): Food!
  updateFoodCategory(updateFoodCategoryInput: UpdateFoodCategoryInput!): FoodCategory!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): Restaurant!
  updateRider(updateRiderInput: UpdateRiderInput!): Rider!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateZone(updateZoneInput: UpdateZoneInput!): Zone!
}

type Query {
  addon(id: String!): Addon!
  addons: [Addon!]!
  banner(id: String!): Banner!
  banners: [Banner!]!
  coupon(id: String!): Coupon!
  coupons: [Coupon!]!
  cuisine(id: String!): Cuisine!
  cuisines: [Cuisine!]!
  food(id: String!): Food!
  foodCategories: [FoodCategory!]!
  foodCategory(id: String!): FoodCategory!
  foods: [Food!]!
  restaurant(id: Int!): Restaurant!
  restaurants: [Restaurant!]!
  rider(id: String!): Rider!
  riders: [Rider!]!
  user(id: String!): User!
  users: [User!]!
  zone(id: String!): Zone!
  zones: [Zone!]!
}

type Restaurant {
  address: String!
  coverPhoto: String
  cuisines: [Cuisine!]!
  deliveryZone: JSON!
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType!
  email: String!
  id: ID!
  location: JSON!
  maxDeliveryTime: Int!
  minDeliveryTime: Int!
  name: String!
  password: String!
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntry!]!
  zone: Zone!
}

input RestaurantRefInput {
  id: String!
}

type Rider {
  createdAt: DateTime!
  email: String
  hasRequested: Boolean!
  id: ID!
  isActive: Boolean!
  licenseNumber: String
  location: JSON
  name: String!
  password: String!
  phone: String!
  pushToken: String
  requestAccepted: Boolean!
  updatedAt: DateTime!
  username: String!
  vehicleNumber: String
  vehicleType: VehicleType
  zone: Zone!
}

type TimingEntry {
  day: String!
  times: [[String!]!]!
}

input TimingEntryInput {
  day: String!
  times: [[String!]!]!
}

input UpdateAddonInput {
  foodItemId: String
  id: String!
  isAvailable: Boolean = true
  name: String
  price: Float
}

input UpdateBannerInput {
  description: String
  id: String!
  position: Float = 0
  targetId: String
  targetType: BannerTargetType
  thumbnail: String
  title: String
  type: BannerType
  url: String
}

input UpdateCouponInput {
  code: String
  discountPercentage: Float
  expiryDate: DateTime
  id: String!
  isActive: Boolean = true
  maxDiscount: Float
  minOrderAmount: Float
}

input UpdateCuisineInput {
  id: ID!
  name: String
  photo: String
}

input UpdateFoodCategoryInput {
  description: String
  id: String!
  image: String
  isActive: Boolean = true
  name: String
}

input UpdateFoodInput {
  addons: [AddonRefInput!]
  category: CategoryRefInput
  description: String
  id: String!
  isAvailable: Boolean
  name: String
  photo: String
  price: Float
  restaurant: RestaurantRefInput
  variations: [CreateVariationInput!]
}

input UpdateRestaurantInput {
  address: String
  coverPhoto: String
  cuisines: [CuisineRefInput!]
  deliveryZone: DeliveryZoneInput
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType
  email: String
  id: String!
  location: LocationInput
  maxDeliveryTime: Int
  minDeliveryTime: Int
  name: String
  password: String
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntryInput!]
  zone: ZoneRefInput
}

input UpdateRiderInput {
  email: String
  id: ID!
  licenseNumber: String
  name: String
  password: String
  phone: String
  pushToken: String
  username: String
  vehicleNumber: String
  vehicleType: VehicleType
  zoneId: String
}

input UpdateUserInput {
  email: String
  id: String!
  name: String
  password: String
  role: String
}

input UpdateZoneInput {
  description: String
  id: String!
  location: GeoJsonPolygonInput
  title: String
}

type User {
  address: JSON
  businessRegNo: String
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  id: ID!
  name: String!
  phone: String
  phoneVerified: Boolean!
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

type Variation {
  createdAt: DateTime!
  discountPrice: Float
  food: Food!
  id: ID!
  isAvailable: Boolean!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

enum VehicleType {
  BICYCLE
  BIKE
  CAR
}

type Zone {
  createdAt: DateTime!
  description: String!
  id: ID!
  location: JSON!
  title: String!
  updatedAt: DateTime!
}

input ZoneRefInput {
  id: ID!
}