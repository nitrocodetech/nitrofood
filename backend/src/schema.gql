# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreateRestaurantInput {
  address: String!
  coverPhoto: String
  cuisines: [String!]!
  deliveryZone: DeliveryZoneInput
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType!
  email: String!
  location: LocationInput!
  maxDeliveryTime: Int!
  minDeliveryTime: Int!
  name: String!
  password: String!
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntryInput!]
  zoneId: ID!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: String!
}

input CreateZoneInput {
  description: String
  location: GeoJsonPolygonInput!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeliveryZoneInput {
  coordinates: [[[Float!]!]!]
}

enum DeliveryZoneType {
  CIRCLE
  POLYGON
}

input GeoJsonPolygonInput {
  coordinates: [[[Float!]!]!]!
  type: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LocationInput {
  """Longitude and Latitude"""
  coordinates: [Float!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): Restaurant!
  createUser(createUserInput: CreateUserInput!): User!
  createZone(createZoneInput: CreateZoneInput!): Zone!
  login(loginInput: LoginInput!): AuthResponse!
  removeRestaurant(id: String!): Restaurant!
  removeUser(id: String!): User!
  removeZone(id: String!): Zone!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): Restaurant!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateZone(updateZoneInput: UpdateZoneInput!): Zone!
}

type Query {
  restaurant(id: Int!): Restaurant!
  restaurants: [Restaurant!]!
  user(id: String!): User!
  users: [User!]!
  zone(id: String!): Zone!
  zones: [Zone!]!
}

type Restaurant {
  address: String!
  coverPhoto: String
  cuisines: [String!]!
  deliveryZone: JSON!
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType!
  email: String!
  id: ID!
  location: JSON!
  maxDeliveryTime: Int!
  minDeliveryTime: Int!
  name: String!
  password: String!
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntry!]!
  zone: Zone!
}

type TimingEntry {
  day: String!
  times: [[String!]!]!
}

input TimingEntryInput {
  day: String!
  times: [[String!]!]!
}

input UpdateRestaurantInput {
  address: String
  coverPhoto: String
  cuisines: [String!]
  deliveryZone: DeliveryZoneInput
  deliveryZoneRadius: Float
  deliveryZoneType: DeliveryZoneType
  email: String
  id: String!
  location: LocationInput
  maxDeliveryTime: Int
  minDeliveryTime: Int
  name: String
  password: String
  phone: String
  profilePhoto: String
  tax: Float
  timings: [TimingEntryInput!]
  zoneId: ID
}

input UpdateUserInput {
  email: String
  id: String!
  name: String
  password: String
  role: String
}

input UpdateZoneInput {
  description: String
  id: String!
  location: GeoJsonPolygonInput
  title: String
}

type User {
  address: JSON
  bussinessRegNo: String
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  id: ID!
  name: String!
  phone: String
  phoneVerified: Boolean!
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

type Zone {
  createdAt: DateTime!
  description: String
  id: ID!
  location: JSON!
  title: String!
  updatedAt: DateTime!
}